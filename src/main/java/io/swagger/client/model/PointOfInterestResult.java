/*
 * Amadeus Travel Innovation Sandbox
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Geolocation;
import io.swagger.client.model.ImageSize;
import io.swagger.client.model.PointOfInterestDetails;
import io.swagger.client.model.PointOfInterestResultGrades;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * PointOfInterestResult
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-24T09:42:17.291Z")
public class PointOfInterestResult {
  @SerializedName("title")
  private String title = null;

  @SerializedName("main_image")
  private String mainImage = null;

  @SerializedName("location")
  private Geolocation location = null;

  @SerializedName("grades")
  private PointOfInterestResultGrades grades = null;

  @SerializedName("categories")
  private List<String> categories = new ArrayList<String>();

  @SerializedName("details")
  private PointOfInterestDetails details = null;

  @SerializedName("contextual_images")
  private List<ImageSize> contextualImages = null;

  @SerializedName("geoname_id")
  private Integer geonameId = null;

  @SerializedName("walk_time")
  private BigDecimal walkTime = null;

  public PointOfInterestResult title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Display name of a given point of interest
   * @return title
  **/
  @ApiModelProperty(required = true, value = "Display name of a given point of interest")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public PointOfInterestResult mainImage(String mainImage) {
    this.mainImage = mainImage;
    return this;
  }

   /**
   * A link to an image of the given location
   * @return mainImage
  **/
  @ApiModelProperty(required = true, value = "A link to an image of the given location")
  public String getMainImage() {
    return mainImage;
  }

  public void setMainImage(String mainImage) {
    this.mainImage = mainImage;
  }

  public PointOfInterestResult location(Geolocation location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @ApiModelProperty(required = true, value = "")
  public Geolocation getLocation() {
    return location;
  }

  public void setLocation(Geolocation location) {
    this.location = location;
  }

  public PointOfInterestResult grades(PointOfInterestResultGrades grades) {
    this.grades = grades;
    return this;
  }

   /**
   * Get grades
   * @return grades
  **/
  @ApiModelProperty(required = true, value = "")
  public PointOfInterestResultGrades getGrades() {
    return grades;
  }

  public void setGrades(PointOfInterestResultGrades grades) {
    this.grades = grades;
  }

  public PointOfInterestResult categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public PointOfInterestResult addCategoriesItem(String categoriesItem) {
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Array of descriptions indicating what type of point of interest this is. You can filter the results to include only certain categories of point of interest using the category input parameter.
   * @return categories
  **/
  @ApiModelProperty(required = true, value = "Array of descriptions indicating what type of point of interest this is. You can filter the results to include only certain categories of point of interest using the category input parameter.")
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }

  public PointOfInterestResult details(PointOfInterestDetails details) {
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @ApiModelProperty(value = "")
  public PointOfInterestDetails getDetails() {
    return details;
  }

  public void setDetails(PointOfInterestDetails details) {
    this.details = details;
  }

  public PointOfInterestResult contextualImages(List<ImageSize> contextualImages) {
    this.contextualImages = contextualImages;
    return this;
  }

  public PointOfInterestResult addContextualImagesItem(ImageSize contextualImagesItem) {
    if (this.contextualImages == null) {
      this.contextualImages = new ArrayList<ImageSize>();
    }
    this.contextualImages.add(contextualImagesItem);
    return this;
  }

   /**
   * Images taken at this point of interest. Note that these images might have nothing to do with the point itself, particularly if you have enabled the social_media parameter
   * @return contextualImages
  **/
  @ApiModelProperty(value = "Images taken at this point of interest. Note that these images might have nothing to do with the point itself, particularly if you have enabled the social_media parameter")
  public List<ImageSize> getContextualImages() {
    return contextualImages;
  }

  public void setContextualImages(List<ImageSize> contextualImages) {
    this.contextualImages = contextualImages;
  }

  public PointOfInterestResult geonameId(Integer geonameId) {
    this.geonameId = geonameId;
    return this;
  }

   /**
   * The GeonamesID of this point of interest, if available
   * @return geonameId
  **/
  @ApiModelProperty(value = "The GeonamesID of this point of interest, if available")
  public Integer getGeonameId() {
    return geonameId;
  }

  public void setGeonameId(Integer geonameId) {
    this.geonameId = geonameId;
  }

  public PointOfInterestResult walkTime(BigDecimal walkTime) {
    this.walkTime = walkTime;
    return this;
  }

   /**
   * Time in minutes that it takes to walk from the searched coordinates to this Point of Interest
   * @return walkTime
  **/
  @ApiModelProperty(value = "Time in minutes that it takes to walk from the searched coordinates to this Point of Interest")
  public BigDecimal getWalkTime() {
    return walkTime;
  }

  public void setWalkTime(BigDecimal walkTime) {
    this.walkTime = walkTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointOfInterestResult pointOfInterestResult = (PointOfInterestResult) o;
    return Objects.equals(this.title, pointOfInterestResult.title) &&
        Objects.equals(this.mainImage, pointOfInterestResult.mainImage) &&
        Objects.equals(this.location, pointOfInterestResult.location) &&
        Objects.equals(this.grades, pointOfInterestResult.grades) &&
        Objects.equals(this.categories, pointOfInterestResult.categories) &&
        Objects.equals(this.details, pointOfInterestResult.details) &&
        Objects.equals(this.contextualImages, pointOfInterestResult.contextualImages) &&
        Objects.equals(this.geonameId, pointOfInterestResult.geonameId) &&
        Objects.equals(this.walkTime, pointOfInterestResult.walkTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, mainImage, location, grades, categories, details, contextualImages, geonameId, walkTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointOfInterestResult {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    mainImage: ").append(toIndentedString(mainImage)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    grades: ").append(toIndentedString(grades)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    contextualImages: ").append(toIndentedString(contextualImages)).append("\n");
    sb.append("    geonameId: ").append(toIndentedString(geonameId)).append("\n");
    sb.append("    walkTime: ").append(toIndentedString(walkTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

